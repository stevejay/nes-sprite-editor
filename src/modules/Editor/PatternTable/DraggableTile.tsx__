import React from "react";
import useSizedCanvasEffect from "../../../shared/utils/use-sized-canvas-effect";
import { GamePaletteWithColors, PatternTile } from "../../../types";
import styles from "./DraggableTile.module.scss";
import drawTile from "../draw-tile";

const PIXEL_ROWS_PER_TILE = 8;
const PIXEL_COLUMNS_PER_TILE = PIXEL_ROWS_PER_TILE;

type Props = {
  row: number;
  column: number;
  scale: number; // in range [1, ...]
  tile: PatternTile;
  palette: GamePaletteWithColors;
  ariaLabel: string; // react-draggable:
  style?: any; // TODO fix any
  onMouseDown?: (event: React.MouseEvent<HTMLElement>) => void; // TODO fix any
  onMouseUp?: any; // TODO fix any
  onTouchStart?: any; // TODO fix any
  onTouchEnd?: any; // TODO fix any
};

const DraggableTile = ({
  scale,
  tile,
  palette,
  ariaLabel,
  style,
  onMouseDown,
  onMouseUp,
  onTouchStart,
  onTouchEnd
}: Props) => {
  const canvasRef = React.useRef<HTMLCanvasElement | null>(null);

  const canvasSize = useSizedCanvasEffect(
    canvasRef,
    PIXEL_COLUMNS_PER_TILE,
    PIXEL_ROWS_PER_TILE,
    scale
  );

  React.useLayoutEffect(() => {
    const canvas = canvasRef.current!;
    const ctx = canvas.getContext("2d")!;
    drawTile(ctx, 0, 0, 0, 0, tile.pixels, palette.colors, scale);
  }, [tile, palette, scale]);

  return (
    <canvas
      ref={canvasRef}
      className={styles.canvas}
      style={{ ...style, canvasSize }}
      role="img"
      aria-label={ariaLabel}
      onMouseDown={onMouseDown}
      onMouseUp={onMouseUp}
      onTouchStart={onTouchStart}
      onTouchEnd={onTouchEnd}
    />
  );
};

export default DraggableTile;
